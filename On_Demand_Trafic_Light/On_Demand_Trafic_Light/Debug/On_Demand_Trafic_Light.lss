
On_Demand_Trafic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  00000844  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001772  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aab  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9c  00000000  00000000  00002c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f1  00000000  00000000  00003d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000119a  00000000  00000000  00004645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000057df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_1>
   8:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_2>
   c:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  74:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Pedestrian_Mode>:


void Pedestrian_Mode(void)
{
	/*f pressed when the cars' Red LED is on*/
	if(Global_Copy_u8StateFlag == 0)
  7c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Global_Copy_u8StateFlag>
  80:	81 11       	cpse	r24, r1
  82:	1b c0       	rjmp	.+54     	; 0xba <Pedestrian_Mode+0x3e>
	{
		/* the pedestrian's Green LED and the cars' Red LEDs will be on for five seconds*/
		LED_voidTurn(LED_CAR_PORT, CAR_RED_LED, LED_ON);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_PEDESTRIAN_PORT, PED_GRN_LED, LED_ON);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	64 e0       	ldi	r22, 0x04	; 4
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidDelay(L_CHANNEL_0, 5000);
  96:	48 e8       	ldi	r20, 0x88	; 136
  98:	53 e1       	ldi	r21, 0x13	; 19
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 a4 01 	call	0x348	; 0x348 <LED_voidDelay>
		LED_voidTurn(LED_CAR_PORT, CAR_RED_LED, LED_OFF);
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_PEDESTRIAN_PORT, PED_GRN_LED, LED_OFF);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	64 e0       	ldi	r22, 0x04	; 4
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
  b8:	52 c0       	rjmp	.+164    	; 0x15e <Pedestrian_Mode+0xe2>
	}
	
	/*if pressed when the cars' Green LED is on or the cars' Yellow LED is blinking*/
	else if(Global_Copy_u8StateFlag==1||Global_Copy_u8StateFlag==2)
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	08 f0       	brcs	.+2      	; 0xc2 <Pedestrian_Mode+0x46>
  c0:	4e c0       	rjmp	.+156    	; 0x15e <Pedestrian_Mode+0xe2>
	{
		LED_voidTurn(LED_PEDESTRIAN_PORT,PED_RED_LED, LED_ON);
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_CAR_PORT,CAR_GRN_LED, LED_ON);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidDelay(L_CHANNEL_0,Global_u32timers_remainingTime);
  d6:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <Global_u32timers_remainingTime>
  da:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <Global_u32timers_remainingTime+0x1>
  de:	05 2e       	mov	r0, r21
  e0:	00 0c       	add	r0, r0
  e2:	66 0b       	sbc	r22, r22
  e4:	77 0b       	sbc	r23, r23
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 a4 01 	call	0x348	; 0x348 <LED_voidDelay>
		LED_voidTurn(LED_PEDESTRIAN_PORT,PED_RED_LED, LED_OFF);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_CAR_PORT,CAR_GRN_LED, LED_OFF);		
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		
		LED_voidDoubleBlink(LED_CAR_PORT, LED_PEDESTRIAN_PORT, CAR_YEL_LED);
 100:	42 e0       	ldi	r20, 0x02	; 2
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_voidDoubleBlink>
		//LED_voidBlink(LED_CAR_PORT | LED_PEDESTRIAN_PORT , CAR_YEL_LED |PED_YEL_LED);

		LED_voidTurn(LED_CAR_PORT,CAR_YEL_LED, LED_OFF);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_PEDESTRIAN_PORT,PED_YEL_LED, LED_OFF);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_PEDESTRIAN_PORT,PED_GRN_LED, LED_ON);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_CAR_PORT,CAR_RED_LED, LED_ON);
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidDelay(L_CHANNEL_0, 5000);
 132:	48 e8       	ldi	r20, 0x88	; 136
 134:	53 e1       	ldi	r21, 0x13	; 19
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 a4 01 	call	0x348	; 0x348 <LED_voidDelay>
		LED_voidTurn(LED_PEDESTRIAN_PORT,PED_GRN_LED, LED_OFF);
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		LED_voidTurn(LED_CAR_PORT,CAR_RED_LED, LED_OFF);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		
		LED_voidDoubleBlink(LED_CAR_PORT, LED_PEDESTRIAN_PORT, CAR_YEL_LED);
 154:	42 e0       	ldi	r20, 0x02	; 2
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_voidDoubleBlink>
       //LED_voidBlink(LED_CAR_PORT | LED_PEDESTRIAN_PORT , CAR_YEL_LED |PED_YEL_LED);				
	}
	
	LED_voidTurn(LED_CAR_PORT,CAR_YEL_LED, LED_OFF);
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	LED_voidTurn(LED_PEDESTRIAN_PORT,PED_YEL_LED, LED_OFF);	
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	
	LED_voidTurn(LED_CAR_PORT,CAR_GRN_LED, LED_ON);
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	64 e0       	ldi	r22, 0x04	; 4
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	LED_voidTurn(LED_PEDESTRIAN_PORT, PED_RED_LED, LED_ON);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	LED_voidDelay(L_CHANNEL_0, 5000);
 186:	48 e8       	ldi	r20, 0x88	; 136
 188:	53 e1       	ldi	r21, 0x13	; 19
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 a4 01 	call	0x348	; 0x348 <LED_voidDelay>
	LED_voidTurn(LED_CAR_PORT,CAR_GRN_LED, LED_OFF);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	LED_voidTurn(LED_PEDESTRIAN_PORT, PED_RED_LED, LED_OFF);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	LED_voidStartTimer(L_CHANNEL_0);	
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 a8 01 	call	0x350	; 0x350 <LED_voidStartTimer>
 1ae:	08 95       	ret

000001b0 <APP_start>:
}

APP_State_t APP_start(void)
{
 1b0:	cf 93       	push	r28
	if(LED_init()== LED_OK)
 1b2:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
 1b6:	81 11       	cpse	r24, r1
 1b8:	43 c0       	rjmp	.+134    	; 0x240 <APP_start+0x90>
	{
/*____________________*pedestrian mode______________________*/
      
	    Button_voidAttachInterrupt(B_INT_0, B_FALLING_EDGE_MODE, *Pedestrian_Mode);
 1ba:	4e e3       	ldi	r20, 0x3E	; 62
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	0e 94 23 01 	call	0x246	; 0x246 <Button_voidAttachInterrupt>
	
/*_____________________*Normal Mode_________________________*/	
		
		/*Car's RED LED turn ON*/
		LED_voidTurn(LED_CAR_PORT, CAR_RED_LED, LED_ON);
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		Global_Copy_u8StateFlag = 0;
 1ce:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Global_Copy_u8StateFlag>
		
		/*Delay 5 sec*/
		LED_voidDelay(L_CHANNEL_0, 5000);
 1d2:	48 e8       	ldi	r20, 0x88	; 136
 1d4:	53 e1       	ldi	r21, 0x13	; 19
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 a4 01 	call	0x348	; 0x348 <LED_voidDelay>
		
		/*Car's RED LED turn OFF*/
		LED_voidTurn(LED_CAR_PORT, CAR_RED_LED, LED_OFF);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		
		/*Car's YELLOW LED Blink*/
		LED_voidBlink(LED_CAR_PORT,CAR_YEL_LED);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 45 01 	call	0x28a	; 0x28a <LED_voidBlink>
		Global_Copy_u8StateFlag = 1;
 1f2:	c1 e0       	ldi	r28, 0x01	; 1
 1f4:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <Global_Copy_u8StateFlag>

		/*Car's YELLOW LED turn OFF*/
		LED_voidTurn(LED_CAR_PORT, CAR_YEL_LED, LED_OFF);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		
		/*Car's GREEN LED turn ON*/
		LED_voidTurn(LED_CAR_PORT, CAR_GRN_LED, LED_ON);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	64 e0       	ldi	r22, 0x04	; 4
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		Global_Copy_u8StateFlag = 2;
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Global_Copy_u8StateFlag>
		
		/*Delay 5 sec*/
		LED_voidDelay(L_CHANNEL_0, 5000);
 212:	48 e8       	ldi	r20, 0x88	; 136
 214:	53 e1       	ldi	r21, 0x13	; 19
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 a4 01 	call	0x348	; 0x348 <LED_voidDelay>
		
		/*Car's GREEN LED turn OFF*/
		LED_voidTurn(LED_CAR_PORT, CAR_GRN_LED, LED_OFF);
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
		
		/*Car's YELLOW LED Blink*/
		LED_voidBlink(LED_CAR_PORT,CAR_YEL_LED);
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 45 01 	call	0x28a	; 0x28a <LED_voidBlink>
		Global_Copy_u8StateFlag = 1;
 232:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <Global_Copy_u8StateFlag>
		
		/*Car's YELLOW LED turn OFF*/
		LED_voidTurn(LED_CAR_PORT, CAR_YEL_LED, LED_OFF);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 41 01 	call	0x282	; 0x282 <LED_voidTurn>
	}
	return APP_OK;	
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <Button_voidAttachInterrupt>:
#include "../../MCAL/EXTI/EXTI_interface.h"
#include "Button.h"

/*This function call Enable interrupt attach interrupt*/
Button_State_t Button_voidAttachInterrupt(uint8 Copy_u8interruptNumber, uint8 Copy_u8interruptMode, void (*pfunc)(void))
{			
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
		/*attach  a specific application function to  ISR0*/
		EXTI_voidAttachInterrupt(Copy_u8interruptNumber, Copy_u8interruptMode, *pfunc);
 24a:	0e 94 80 02 	call	0x500	; 0x500 <EXTI_voidAttachInterrupt>
		
		/*Enable Interrupt INT_0*/
		EXTI_voidEnableInterrupt(Copy_u8interruptNumber);
 24e:	8c 2f       	mov	r24, r28
 250:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <EXTI_voidEnableInterrupt>
		
		return Button_OK;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <LED_init>:
#include "../../MCAL/TIMER/TIMER_interface.h"
#include "LED.h"

LED_State_t LED_init(void)
{
    TIMER_voidInitDelay(CHANNEL_0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TIMER_voidInitDelay>
	GPIO_voidSetPinStatus(PORTD, PIN2, GPIO_INPUT_PULLUP);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 b7 01 	call	0x36e	; 0x36e <GPIO_voidSetPinStatus>
	GPIO_voidSetPinStatus(LED_CAR_PORT, CAR_RED_LED|CAR_GRN_LED|CAR_YEL_LED, GPIO_OUTPUT);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	67 e0       	ldi	r22, 0x07	; 7
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 b7 01 	call	0x36e	; 0x36e <GPIO_voidSetPinStatus>
	GPIO_voidSetPinStatus(LED_PEDESTRIAN_PORT, PED_RED_LED|PED_GRN_LED|PED_YEL_LED, GPIO_OUTPUT);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	67 e0       	ldi	r22, 0x07	; 7
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 b7 01 	call	0x36e	; 0x36e <GPIO_voidSetPinStatus>
	return LED_OK;
}
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret

00000282 <LED_voidTurn>:


LED_State_t LED_voidTurn(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Status)
{
	GPIO_voidSetPinValue(Copy_u8Port, Copy_u8Pin, Copy_u8Status);
 282:	0e 94 1d 02 	call	0x43a	; 0x43a <GPIO_voidSetPinValue>
	return LED_OK;
}
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	08 95       	ret

0000028a <LED_voidBlink>:

LED_State_t LED_voidBlink(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	d8 2f       	mov	r29, r24
 298:	c6 2f       	mov	r28, r22
	/*Car's YELLOW LED Blink*/
	for(uint32 i = 0;i <5000;i+=500)
 29a:	c1 2c       	mov	r12, r1
 29c:	d1 2c       	mov	r13, r1
 29e:	76 01       	movw	r14, r12
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <LED_voidBlink+0x3a>
	{
		GPIO_voidTogglePinValue(Copy_u8Port,Copy_u8Pin);
 2a2:	6c 2f       	mov	r22, r28
 2a4:	8d 2f       	mov	r24, r29
 2a6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <GPIO_voidTogglePinValue>
		//Global_Copy_u8StateFlag = 1;
		TIMER_voidDelayMs_Sync(CHANNEL_0,500);
 2aa:	44 ef       	ldi	r20, 0xF4	; 244
 2ac:	51 e0       	ldi	r21, 0x01	; 1
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <TIMER_voidDelayMs_Sync>
}

LED_State_t LED_voidBlink(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
	/*Car's YELLOW LED Blink*/
	for(uint32 i = 0;i <5000;i+=500)
 2b8:	84 ef       	ldi	r24, 0xF4	; 244
 2ba:	c8 0e       	add	r12, r24
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	d8 1e       	adc	r13, r24
 2c0:	e1 1c       	adc	r14, r1
 2c2:	f1 1c       	adc	r15, r1
 2c4:	88 e8       	ldi	r24, 0x88	; 136
 2c6:	c8 16       	cp	r12, r24
 2c8:	83 e1       	ldi	r24, 0x13	; 19
 2ca:	d8 06       	cpc	r13, r24
 2cc:	e1 04       	cpc	r14, r1
 2ce:	f1 04       	cpc	r15, r1
 2d0:	40 f3       	brcs	.-48     	; 0x2a2 <LED_voidBlink+0x18>
		GPIO_voidTogglePinValue(Copy_u8Port,Copy_u8Pin);
		//Global_Copy_u8StateFlag = 1;
		TIMER_voidDelayMs_Sync(CHANNEL_0,500);
	}
	return LED_OK;
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	08 95       	ret

000002e2 <LED_voidDoubleBlink>:

LED_State_t LED_voidDoubleBlink(uint8 Copy_u8Port, uint8 Copy2_u8Port, uint8 Copy_u8Pin)
{
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	18 2f       	mov	r17, r24
 2f2:	d6 2f       	mov	r29, r22
 2f4:	c4 2f       	mov	r28, r20
	/*Car's YELLOW LED Blink*/
	for(uint32 i = 0;i <5000;i+=500)
 2f6:	c1 2c       	mov	r12, r1
 2f8:	d1 2c       	mov	r13, r1
 2fa:	76 01       	movw	r14, r12
 2fc:	15 c0       	rjmp	.+42     	; 0x328 <LED_voidDoubleBlink+0x46>
	{
		GPIO_voidTogglePinValue(Copy_u8Port,Copy_u8Pin);
 2fe:	6c 2f       	mov	r22, r28
 300:	81 2f       	mov	r24, r17
 302:	0e 94 53 02 	call	0x4a6	; 0x4a6 <GPIO_voidTogglePinValue>
		GPIO_voidTogglePinValue(Copy2_u8Port,Copy_u8Pin);
 306:	6c 2f       	mov	r22, r28
 308:	8d 2f       	mov	r24, r29
 30a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <GPIO_voidTogglePinValue>
		//Global_Copy_u8StateFlag = 1;
		TIMER_voidDelayMs_Sync(CHANNEL_0,500);
 30e:	44 ef       	ldi	r20, 0xF4	; 244
 310:	51 e0       	ldi	r21, 0x01	; 1
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 62 03 	call	0x6c4	; 0x6c4 <TIMER_voidDelayMs_Sync>
}

LED_State_t LED_voidDoubleBlink(uint8 Copy_u8Port, uint8 Copy2_u8Port, uint8 Copy_u8Pin)
{
	/*Car's YELLOW LED Blink*/
	for(uint32 i = 0;i <5000;i+=500)
 31c:	84 ef       	ldi	r24, 0xF4	; 244
 31e:	c8 0e       	add	r12, r24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	d8 1e       	adc	r13, r24
 324:	e1 1c       	adc	r14, r1
 326:	f1 1c       	adc	r15, r1
 328:	88 e8       	ldi	r24, 0x88	; 136
 32a:	c8 16       	cp	r12, r24
 32c:	83 e1       	ldi	r24, 0x13	; 19
 32e:	d8 06       	cpc	r13, r24
 330:	e1 04       	cpc	r14, r1
 332:	f1 04       	cpc	r15, r1
 334:	20 f3       	brcs	.-56     	; 0x2fe <LED_voidDoubleBlink+0x1c>
		GPIO_voidTogglePinValue(Copy2_u8Port,Copy_u8Pin);
		//Global_Copy_u8StateFlag = 1;
		TIMER_voidDelayMs_Sync(CHANNEL_0,500);
	}
	return LED_OK;
}
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	08 95       	ret

00000348 <LED_voidDelay>:

LED_State_t LED_voidDelay(uint8 Copy_u8Channel, uint32 Copy_u8DelayPeriodMs)
{
	TIMER_voidDelayMs_Sync(Copy_u8Channel, Copy_u8DelayPeriodMs);
 348:	0e 94 62 03 	call	0x6c4	; 0x6c4 <TIMER_voidDelayMs_Sync>
	return LED_OK;
}
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret

00000350 <LED_voidStartTimer>:

LED_State_t LED_voidStartTimer(uint8 Copy_u8Channel)
{
	TIMER_voidStartTimer(CHANNEL_0);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 2d 03 	call	0x65a	; 0x65a <TIMER_voidStartTimer>
	return LED_OK;
}
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret

0000035a <main>:
#include "APP/APP.h"

int main(void)
{

 if((TEST_Modules() == TEST_OK))
 35a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TEST_Modules>
 35e:	81 11       	cpse	r24, r1
 360:	03 c0       	rjmp	.+6      	; 0x368 <main+0xe>
 {		
	while (1)
	{		
		APP_start();
 362:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <APP_start>
 366:	fd cf       	rjmp	.-6      	; 0x362 <main+0x8>
	}
 }
}
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret

0000036e <GPIO_voidSetPinStatus>:
			case PORTB: Copy_Pu8Value = GET_BIT(GPIO_PORTB, Copy_u8Pin); break;
			case PORTC: Copy_Pu8Value = GET_BIT(GPIO_PORTC, Copy_u8Pin); break;
			case PORTD: Copy_Pu8Value = GET_BIT(GPIO_PORTD, Copy_u8Pin); break;
		}
	return Copy_Pu8Value;
}
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	c1 f1       	breq	.+112    	; 0x3e2 <GPIO_voidSetPinStatus+0x74>
 372:	18 f0       	brcs	.+6      	; 0x37a <GPIO_voidSetPinStatus+0xc>
 374:	42 30       	cpi	r20, 0x02	; 2
 376:	c9 f0       	breq	.+50     	; 0x3aa <GPIO_voidSetPinStatus+0x3c>
 378:	08 95       	ret
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	51 f0       	breq	.+20     	; 0x392 <GPIO_voidSetPinStatus+0x24>
 37e:	28 f0       	brcs	.+10     	; 0x38a <GPIO_voidSetPinStatus+0x1c>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	59 f0       	breq	.+22     	; 0x39a <GPIO_voidSetPinStatus+0x2c>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	69 f0       	breq	.+26     	; 0x3a2 <GPIO_voidSetPinStatus+0x34>
 388:	08 95       	ret
 38a:	8a b3       	in	r24, 0x1a	; 26
 38c:	68 2b       	or	r22, r24
 38e:	6a bb       	out	0x1a, r22	; 26
 390:	08 95       	ret
 392:	87 b3       	in	r24, 0x17	; 23
 394:	68 2b       	or	r22, r24
 396:	67 bb       	out	0x17, r22	; 23
 398:	08 95       	ret
 39a:	84 b3       	in	r24, 0x14	; 20
 39c:	68 2b       	or	r22, r24
 39e:	64 bb       	out	0x14, r22	; 20
 3a0:	08 95       	ret
 3a2:	81 b3       	in	r24, 0x11	; 17
 3a4:	68 2b       	or	r22, r24
 3a6:	61 bb       	out	0x11, r22	; 17
 3a8:	08 95       	ret
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <GPIO_voidSetPinStatus+0x56>
 3ae:	28 f0       	brcs	.+10     	; 0x3ba <GPIO_voidSetPinStatus+0x4c>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	69 f0       	breq	.+26     	; 0x3ce <GPIO_voidSetPinStatus+0x60>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	81 f0       	breq	.+32     	; 0x3d8 <GPIO_voidSetPinStatus+0x6a>
 3b8:	08 95       	ret
 3ba:	8a b3       	in	r24, 0x1a	; 26
 3bc:	60 95       	com	r22
 3be:	68 23       	and	r22, r24
 3c0:	6a bb       	out	0x1a, r22	; 26
 3c2:	08 95       	ret
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	60 95       	com	r22
 3c8:	68 23       	and	r22, r24
 3ca:	67 bb       	out	0x17, r22	; 23
 3cc:	08 95       	ret
 3ce:	84 b3       	in	r24, 0x14	; 20
 3d0:	60 95       	com	r22
 3d2:	68 23       	and	r22, r24
 3d4:	64 bb       	out	0x14, r22	; 20
 3d6:	08 95       	ret
 3d8:	81 b3       	in	r24, 0x11	; 17
 3da:	60 95       	com	r22
 3dc:	68 23       	and	r22, r24
 3de:	61 bb       	out	0x11, r22	; 17
 3e0:	08 95       	ret
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	79 f0       	breq	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <GPIO_voidSetPinStatus+0x84>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	a9 f0       	breq	.+42     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	e1 f0       	breq	.+56     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3f0:	08 95       	ret
 3f2:	8a b3       	in	r24, 0x1a	; 26
 3f4:	96 2f       	mov	r25, r22
 3f6:	90 95       	com	r25
 3f8:	89 23       	and	r24, r25
 3fa:	8a bb       	out	0x1a, r24	; 26
 3fc:	8b b3       	in	r24, 0x1b	; 27
 3fe:	68 2b       	or	r22, r24
 400:	6b bb       	out	0x1b, r22	; 27
 402:	08 95       	ret
 404:	87 b3       	in	r24, 0x17	; 23
 406:	96 2f       	mov	r25, r22
 408:	90 95       	com	r25
 40a:	89 23       	and	r24, r25
 40c:	87 bb       	out	0x17, r24	; 23
 40e:	88 b3       	in	r24, 0x18	; 24
 410:	68 2b       	or	r22, r24
 412:	68 bb       	out	0x18, r22	; 24
 414:	08 95       	ret
 416:	84 b3       	in	r24, 0x14	; 20
 418:	96 2f       	mov	r25, r22
 41a:	90 95       	com	r25
 41c:	89 23       	and	r24, r25
 41e:	84 bb       	out	0x14, r24	; 20
 420:	85 b3       	in	r24, 0x15	; 21
 422:	68 2b       	or	r22, r24
 424:	65 bb       	out	0x15, r22	; 21
 426:	08 95       	ret
 428:	81 b3       	in	r24, 0x11	; 17
 42a:	96 2f       	mov	r25, r22
 42c:	90 95       	com	r25
 42e:	89 23       	and	r24, r25
 430:	81 bb       	out	0x11, r24	; 17
 432:	82 b3       	in	r24, 0x12	; 18
 434:	68 2b       	or	r22, r24
 436:	62 bb       	out	0x12, r22	; 18
 438:	08 95       	ret

0000043a <GPIO_voidSetPinValue>:
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	c1 f4       	brne	.+48     	; 0x46e <GPIO_voidSetPinValue+0x34>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	51 f0       	breq	.+20     	; 0x456 <GPIO_voidSetPinValue+0x1c>
 442:	28 f0       	brcs	.+10     	; 0x44e <GPIO_voidSetPinValue+0x14>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	59 f0       	breq	.+22     	; 0x45e <GPIO_voidSetPinValue+0x24>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	69 f0       	breq	.+26     	; 0x466 <GPIO_voidSetPinValue+0x2c>
 44c:	08 95       	ret
 44e:	8b b3       	in	r24, 0x1b	; 27
 450:	68 2b       	or	r22, r24
 452:	6b bb       	out	0x1b, r22	; 27
 454:	08 95       	ret
 456:	88 b3       	in	r24, 0x18	; 24
 458:	68 2b       	or	r22, r24
 45a:	68 bb       	out	0x18, r22	; 24
 45c:	08 95       	ret
 45e:	85 b3       	in	r24, 0x15	; 21
 460:	68 2b       	or	r22, r24
 462:	65 bb       	out	0x15, r22	; 21
 464:	08 95       	ret
 466:	82 b3       	in	r24, 0x12	; 18
 468:	68 2b       	or	r22, r24
 46a:	62 bb       	out	0x12, r22	; 18
 46c:	08 95       	ret
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	59 f0       	breq	.+22     	; 0x488 <GPIO_voidSetPinValue+0x4e>
 472:	28 f0       	brcs	.+10     	; 0x47e <GPIO_voidSetPinValue+0x44>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	69 f0       	breq	.+26     	; 0x492 <GPIO_voidSetPinValue+0x58>
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	81 f0       	breq	.+32     	; 0x49c <GPIO_voidSetPinValue+0x62>
 47c:	08 95       	ret
 47e:	8b b3       	in	r24, 0x1b	; 27
 480:	60 95       	com	r22
 482:	68 23       	and	r22, r24
 484:	6b bb       	out	0x1b, r22	; 27
 486:	08 95       	ret
 488:	88 b3       	in	r24, 0x18	; 24
 48a:	60 95       	com	r22
 48c:	68 23       	and	r22, r24
 48e:	68 bb       	out	0x18, r22	; 24
 490:	08 95       	ret
 492:	85 b3       	in	r24, 0x15	; 21
 494:	60 95       	com	r22
 496:	68 23       	and	r22, r24
 498:	65 bb       	out	0x15, r22	; 21
 49a:	08 95       	ret
 49c:	82 b3       	in	r24, 0x12	; 18
 49e:	60 95       	com	r22
 4a0:	68 23       	and	r22, r24
 4a2:	62 bb       	out	0x12, r22	; 18
 4a4:	08 95       	ret

000004a6 <GPIO_voidTogglePinValue>:
/*This function is responsible for toggling specific port pin [HIGH->LOW -LOW->HIGH] */
void GPIO_voidTogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
		switch(Copy_u8Port)
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	51 f0       	breq	.+20     	; 0x4be <GPIO_voidTogglePinValue+0x18>
 4aa:	28 f0       	brcs	.+10     	; 0x4b6 <GPIO_voidTogglePinValue+0x10>
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <GPIO_voidTogglePinValue+0x20>
 4b0:	83 30       	cpi	r24, 0x03	; 3
 4b2:	69 f0       	breq	.+26     	; 0x4ce <GPIO_voidTogglePinValue+0x28>
 4b4:	08 95       	ret
		{
			case PORTA: GPIO_PORTA ^= Copy_u8Pin; break;
 4b6:	8b b3       	in	r24, 0x1b	; 27
 4b8:	68 27       	eor	r22, r24
 4ba:	6b bb       	out	0x1b, r22	; 27
 4bc:	08 95       	ret
			case PORTB: GPIO_PORTB ^= Copy_u8Pin; break;
 4be:	88 b3       	in	r24, 0x18	; 24
 4c0:	68 27       	eor	r22, r24
 4c2:	68 bb       	out	0x18, r22	; 24
 4c4:	08 95       	ret
			case PORTC: GPIO_PORTC ^= Copy_u8Pin; break;
 4c6:	85 b3       	in	r24, 0x15	; 21
 4c8:	68 27       	eor	r22, r24
 4ca:	65 bb       	out	0x15, r22	; 21
 4cc:	08 95       	ret
			case PORTD: GPIO_PORTD ^= Copy_u8Pin; break;
 4ce:	82 b3       	in	r24, 0x12	; 18
 4d0:	68 27       	eor	r22, r24
 4d2:	62 bb       	out	0x12, r22	; 18
 4d4:	08 95       	ret

000004d6 <EXTI_voidEnableInterrupt>:
				break;

				case INT_1: CLR_BIT(MEXTI_GICR, 7); /*Enable INT_1*/
				break;

				case INT_2: CLR_BIT(MEXTI_GICR, 5); /*Enable INT_2*/
 4d6:	9f b7       	in	r25, 0x3f	; 63
 4d8:	90 68       	ori	r25, 0x80	; 128
 4da:	9f bf       	out	0x3f, r25	; 63
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	41 f0       	breq	.+16     	; 0x4f0 <EXTI_voidEnableInterrupt+0x1a>
 4e0:	18 f0       	brcs	.+6      	; 0x4e8 <EXTI_voidEnableInterrupt+0x12>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	49 f0       	breq	.+18     	; 0x4f8 <EXTI_voidEnableInterrupt+0x22>
 4e6:	08 95       	ret
 4e8:	8b b7       	in	r24, 0x3b	; 59
 4ea:	80 64       	ori	r24, 0x40	; 64
 4ec:	8b bf       	out	0x3b, r24	; 59
 4ee:	08 95       	ret
 4f0:	8b b7       	in	r24, 0x3b	; 59
 4f2:	80 68       	ori	r24, 0x80	; 128
 4f4:	8b bf       	out	0x3b, r24	; 59
 4f6:	08 95       	ret
 4f8:	8b b7       	in	r24, 0x3b	; 59
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	8b bf       	out	0x3b, r24	; 59
 4fe:	08 95       	ret

00000500 <EXTI_voidAttachInterrupt>:

/*This function is used to attach  a specific application function to specific ISR*/
void EXTI_voidAttachInterrupt(uint8 Copy_u8interruptNumber, uint8_t Copy_u8interruptMode, void (*pfunc)(void))
{
	/*Switching over interrupt number*/
	switch(Copy_u8interruptNumber)
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	79 f0       	breq	.+30     	; 0x522 <EXTI_voidAttachInterrupt+0x22>
 504:	18 f0       	brcs	.+6      	; 0x50c <EXTI_voidAttachInterrupt+0xc>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	e1 f0       	breq	.+56     	; 0x542 <EXTI_voidAttachInterrupt+0x42>
 50a:	08 95       	ret
	{
		case INT_0:

		/*Setting the application function address for callback*/
		Globalfunc_INT_0 = pfunc;
 50c:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <Globalfunc_INT_0+0x1>
 510:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <Globalfunc_INT_0>

		MEXTI_MCUCR &= 0xFC;                   /*Clearing bit0 and bit1*/
 514:	85 b7       	in	r24, 0x35	; 53
 516:	8c 7f       	andi	r24, 0xFC	; 252
 518:	85 bf       	out	0x35, r24	; 53
      
	    MEXTI_MCUCR |= (Copy_u8interruptMode); /*Setting the INT_0 mode*/ 
 51a:	85 b7       	in	r24, 0x35	; 53
 51c:	68 2b       	or	r22, r24
 51e:	65 bf       	out	0x35, r22	; 53
		
		break;
 520:	08 95       	ret

		case INT_1:

		/*Setting the application function address for callback*/
		Globalfunc_INT_1 = pfunc;
 522:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <Globalfunc_INT_1+0x1>
 526:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <Globalfunc_INT_1>

		MEXTI_MCUCR &= 0xF3;                      /*Clearing bit2 and bit3*/
 52a:	85 b7       	in	r24, 0x35	; 53
 52c:	83 7f       	andi	r24, 0xF3	; 243
 52e:	85 bf       	out	0x35, r24	; 53

		MEXTI_MCUCR |= (Copy_u8interruptMode << 2);  /*Setting the INT_1 mode*/
 530:	85 b7       	in	r24, 0x35	; 53
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	68 2b       	or	r22, r24
 53e:	65 bf       	out	0x35, r22	; 53
		
		break;
 540:	08 95       	ret

		/*In case of interrupt 2*/
		case INT_2:

		/*Setting the application function address for callback*/
		Globalfunc_INT_2 = pfunc;
 542:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 546:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>

		/*Switching over interrupt modes*/
		switch(Copy_u8interruptMode)
 54a:	62 30       	cpi	r22, 0x02	; 2
 54c:	19 f0       	breq	.+6      	; 0x554 <EXTI_voidAttachInterrupt+0x54>
 54e:	63 30       	cpi	r22, 0x03	; 3
 550:	29 f0       	breq	.+10     	; 0x55c <EXTI_voidAttachInterrupt+0x5c>
 552:	08 95       	ret
		{
			/*In case of falling edge mode*/
			case FALLING_EDGE_MODE:

			/*Enable falling edge mode for INT_2*/
			CLR_BIT(MEXTI_MCUCSR, 6);        break;
 554:	84 b7       	in	r24, 0x34	; 52
 556:	8f 7b       	andi	r24, 0xBF	; 191
 558:	84 bf       	out	0x34, r24	; 52
 55a:	08 95       	ret

			/*In case of falling edge mode*/
			case RISING_EDGE_MODE:

			/*Enable rising edge mode for INT_2*/
			SET_BIT(MEXTI_MCUCSR, 6);       break;
 55c:	84 b7       	in	r24, 0x34	; 52
 55e:	80 64       	ori	r24, 0x40	; 64
 560:	84 bf       	out	0x34, r24	; 52
 562:	08 95       	ret

00000564 <__vector_1>:
	}
}

/*INT_0 ISR*/
ISR(INT0_vect)
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	2f 93       	push	r18
 570:	3f 93       	push	r19
 572:	4f 93       	push	r20
 574:	5f 93       	push	r21
 576:	6f 93       	push	r22
 578:	7f 93       	push	r23
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	af 93       	push	r26
 580:	bf 93       	push	r27
 582:	ef 93       	push	r30
 584:	ff 93       	push	r31
	
	/*Checking if the global pointer to function is NULL or not*/
	if(Globalfunc_INT_0 != NULL)
 586:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Globalfunc_INT_0>
 58a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Globalfunc_INT_0+0x1>
 58e:	30 97       	sbiw	r30, 0x00	; 0
 590:	09 f0       	breq	.+2      	; 0x594 <__vector_1+0x30>
	{
		/*Calling application function*/
		Globalfunc_INT_0();
 592:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <__vector_2>:

/*INT_1 ISR*/
ISR(INT1_vect)
{
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	/*Checking if the global pointer to function is NULL or not*/
	if(Globalfunc_INT_1 != NULL)
 5d8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Globalfunc_INT_1>
 5dc:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Globalfunc_INT_1+0x1>
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <__vector_2+0x30>
	{
		/*Calling application function*/
		Globalfunc_INT_1();
 5e4:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_3>:

/*INT_2 ISR*/
ISR(INT2_vect)
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
	/*Checking if the global pointer to function is NULL or not*/
	if(Globalfunc_INT_2 != NULL)
 62a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 62e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 632:	30 97       	sbiw	r30, 0x00	; 0
 634:	09 f0       	breq	.+2      	; 0x638 <__vector_3+0x30>
	{
		/*Calling application function*/
		Globalfunc_INT_2();
 636:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <TIMER_voidStartTimer>:
		{
			/*In case of timer0 channel*/
			case CHANNEL_0:

			/*Stopping timer channel 0*/
			Timer_voidStopTimer(CHANNEL_0);
 65a:	88 23       	and	r24, r24
 65c:	19 f0       	breq	.+6      	; 0x664 <TIMER_voidStartTimer+0xa>
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	59 f0       	breq	.+22     	; 0x678 <TIMER_voidStartTimer+0x1e>
 662:	08 95       	ret
 664:	83 b7       	in	r24, 0x33	; 51
 666:	88 7f       	andi	r24, 0xF8	; 248
 668:	83 bf       	out	0x33, r24	; 51
 66a:	12 be       	out	0x32, r1	; 50
 66c:	93 b7       	in	r25, 0x33	; 51
 66e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Global_u8timer0_prescaler>
 672:	89 2b       	or	r24, r25
 674:	83 bf       	out	0x33, r24	; 51
 676:	08 95       	ret
 678:	8e b5       	in	r24, 0x2e	; 46
 67a:	9f b5       	in	r25, 0x2f	; 47
 67c:	88 7f       	andi	r24, 0xF8	; 248
 67e:	9f bd       	out	0x2f, r25	; 47
 680:	8e bd       	out	0x2e, r24	; 46
 682:	1d bc       	out	0x2d, r1	; 45
 684:	1c bc       	out	0x2c, r1	; 44
 686:	8e b5       	in	r24, 0x2e	; 46
 688:	9f b5       	in	r25, 0x2f	; 47
 68a:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <Global_u8timer1_prescaler>
 68e:	82 2b       	or	r24, r18
 690:	9f bd       	out	0x2f, r25	; 47
 692:	8e bd       	out	0x2e, r24	; 46
 694:	08 95       	ret

00000696 <Timer_voidStopTimer>:
 696:	81 11       	cpse	r24, r1
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <Timer_voidStopTimer+0xa>
 69a:	83 b7       	in	r24, 0x33	; 51
 69c:	88 7f       	andi	r24, 0xF8	; 248
 69e:	83 bf       	out	0x33, r24	; 51
 6a0:	08 95       	ret

000006a2 <TIMER_voidInitDelay>:
 6a2:	88 23       	and	r24, r24
 6a4:	19 f0       	breq	.+6      	; 0x6ac <TIMER_voidInitDelay+0xa>
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	61 f4       	brne	.+24     	; 0x6c2 <TIMER_voidInitDelay+0x20>
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <TIMER_voidInitDelay+0x1a>
 6ac:	83 e0       	ldi	r24, 0x03	; 3
 6ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Global_u8timer0_prescaler>
 6b2:	88 e0       	ldi	r24, 0x08	; 8
 6b4:	83 bf       	out	0x33, r24	; 51
 6b6:	8d e7       	ldi	r24, 0x7D	; 125
 6b8:	8c bf       	out	0x3c, r24	; 60
 6ba:	08 95       	ret
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Global_u8timer1_prescaler>
 6c2:	08 95       	ret

000006c4 <TIMER_voidDelayMs_Sync>:
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	6a 01       	movw	r12, r20
 6ce:	7b 01       	movw	r14, r22
 6d0:	81 11       	cpse	r24, r1
 6d2:	20 c0       	rjmp	.+64     	; 0x714 <TIMER_voidDelayMs_Sync+0x50>
 6d4:	0e 94 2d 03 	call	0x65a	; 0x65a <TIMER_voidStartTimer>
 6d8:	10 c0       	rjmp	.+32     	; 0x6fa <TIMER_voidDelayMs_Sync+0x36>
 6da:	08 b6       	in	r0, 0x38	; 56
 6dc:	01 fe       	sbrs	r0, 1
 6de:	fd cf       	rjmp	.-6      	; 0x6da <TIMER_voidDelayMs_Sync+0x16>
 6e0:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <Global_u32timers_remainingTime>
 6e4:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <Global_u32timers_remainingTime+0x1>
 6e8:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Global_u32timers_remainingTime+0x2>
 6ec:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Global_u32timers_remainingTime+0x3>
 6f0:	88 b7       	in	r24, 0x38	; 56
 6f2:	82 60       	ori	r24, 0x02	; 2
 6f4:	88 bf       	out	0x38, r24	; 56
 6f6:	6a 01       	movw	r12, r20
 6f8:	7b 01       	movw	r14, r22
 6fa:	b7 01       	movw	r22, r14
 6fc:	a6 01       	movw	r20, r12
 6fe:	41 50       	subi	r20, 0x01	; 1
 700:	51 09       	sbc	r21, r1
 702:	61 09       	sbc	r22, r1
 704:	71 09       	sbc	r23, r1
 706:	cd 28       	or	r12, r13
 708:	ce 28       	or	r12, r14
 70a:	cf 28       	or	r12, r15
 70c:	31 f7       	brne	.-52     	; 0x6da <TIMER_voidDelayMs_Sync+0x16>
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	0e 94 2d 03 	call	0x65a	; 0x65a <TIMER_voidStartTimer>
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	df 90       	pop	r13
 71a:	cf 90       	pop	r12
 71c:	08 95       	ret

0000071e <__vector_10>:
/************************************************************************************************/

/*Timer0 compare match interrupt service routine (ISR)*/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	2f 93       	push	r18
 72a:	3f 93       	push	r19
 72c:	4f 93       	push	r20
 72e:	5f 93       	push	r21
 730:	6f 93       	push	r22
 732:	7f 93       	push	r23
 734:	8f 93       	push	r24
 736:	9f 93       	push	r25
 738:	af 93       	push	r26
 73a:	bf 93       	push	r27
 73c:	ef 93       	push	r30
 73e:	ff 93       	push	r31
	/*Checking if the call back pointer has an address of function or not*/
	if(Globalfunc_timer0_ISR != NULL)
 740:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Globalfunc_timer0_ISR>
 744:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Globalfunc_timer0_ISR+0x1>
 748:	30 97       	sbiw	r30, 0x00	; 0
 74a:	f9 f0       	breq	.+62     	; 0x78a <__vector_10+0x6c>
	{
		/*Checking if the delay period has passed or not*/
		if(Global_u32timer0_delayPeriod)
 74c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Global_u32timer0_delayPeriod>
 750:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Global_u32timer0_delayPeriod+0x1>
 754:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <Global_u32timer0_delayPeriod+0x2>
 758:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <Global_u32timer0_delayPeriod+0x3>
 75c:	00 97       	sbiw	r24, 0x00	; 0
 75e:	a1 05       	cpc	r26, r1
 760:	b1 05       	cpc	r27, r1
 762:	61 f0       	breq	.+24     	; 0x77c <__vector_10+0x5e>
		{
			/*Decrementing delay period*/
			Global_u32timer0_delayPeriod--;
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	a1 09       	sbc	r26, r1
 768:	b1 09       	sbc	r27, r1
 76a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Global_u32timer0_delayPeriod>
 76e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Global_u32timer0_delayPeriod+0x1>
 772:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <Global_u32timer0_delayPeriod+0x2>
 776:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <Global_u32timer0_delayPeriod+0x3>
 77a:	07 c0       	rjmp	.+14     	; 0x78a <__vector_10+0x6c>
		}
		else
		{
			/*Executing the call back function*/
			Globalfunc_timer0_ISR();
 77c:	09 95       	icall

			/*Disable the compare match interrupt*/
			CLR_BIT(TIMSK, 1);
 77e:	89 b7       	in	r24, 0x39	; 57
 780:	8d 7f       	andi	r24, 0xFD	; 253
 782:	89 bf       	out	0x39, r24	; 57

			/*Stopping the timer*/
			Timer_voidStopTimer(CHANNEL_0);
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	0e 94 4b 03 	call	0x696	; 0x696 <Timer_voidStopTimer>
		}
	}
}
 78a:	ff 91       	pop	r31
 78c:	ef 91       	pop	r30
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	5f 91       	pop	r21
 79c:	4f 91       	pop	r20
 79e:	3f 91       	pop	r19
 7a0:	2f 91       	pop	r18
 7a2:	0f 90       	pop	r0
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	0f 90       	pop	r0
 7a8:	1f 90       	pop	r1
 7aa:	18 95       	reti

000007ac <TEST_Modules>:
#include "TEST.h"

TEST_State_t TEST_Modules(void)
{
	TEST_State_t Local_return = TEST_OK;
	if((Button_voidAttachInterrupt(B_INT_0, B_FALLING_EDGE_MODE, *Pedestrian_Mode) == Button_OK) && (APP_start()== APP_OK) && (LED_init() == LED_OK))
 7ac:	4e e3       	ldi	r20, 0x3E	; 62
 7ae:	50 e0       	ldi	r21, 0x00	; 0
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	0e 94 23 01 	call	0x246	; 0x246 <Button_voidAttachInterrupt>
 7b8:	81 11       	cpse	r24, r1
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <TEST_Modules+0x1c>
 7bc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <APP_start>
 7c0:	81 11       	cpse	r24, r1
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <TEST_Modules+0x1c>
 7c4:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	{
		Local_return = TEST_OK;
	}
	return Local_return;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	08 95       	ret

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
